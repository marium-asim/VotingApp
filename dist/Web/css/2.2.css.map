{"version":3,"sources":["webpack:///./src/components/Header.svelte","webpack:///./src/components/Footer.svelte","webpack:///./src/shared/Card.svelte","webpack:///./src/components/PollDetails.svelte","webpack:///./src/components/PollList.svelte","webpack:///./src/components/CreatePollForm.svelte","webpack:///./src/shared/Tabs.svelte","webpack:///./src/components/App.svelte"],"names":[],"mappings":"AAQA;EAAO,gBACc;EACjB;AAAa;;AAChB;EAEE,QACU;EACb;AAAkB,C;ACPlB;EAAO,YACU;EACb,iBAAkB;EAClB,gBAAiB;EACjB;AAAY,C;ACLhB;EAAM,gBACe;EACjB,YAAa;EACb,iBAAkB;EAClB;AAAuC,C;ACiE3C;EAAG,aACe;EACd;AAAW;;AACd;EAEC,cACiB;EACf,eAAgB;EAChB,UAAW;EACX;AAAmB;;AACtB;EAEO,qBACkB;EACtB,cAAe;EACf,gBAAiB;EACjB;AAAkB;;AAErB;EAGA;AACe;;AACf;EAEI,oBACoB;EACrB;AAAkB;;AAErB;EAEQ,WACO;EACZ,iBAAkB;EAClB;AAAsB;;AAEzB;EAEU,yBACiB;EACxB;AAAgB;;AACnB;EAEU,2BACqB;EAC5B;AAAsB;;AACzB;EAGA,eACmB;EAChB;AAAkB,C;AC9GtB;EAAW,YACM;EACb,6BAA8B;EAC9B;AAAc,C;ACwElB;EAAK,WACW;EACZ,aAAa;EACb;AAAkB;;AACrB;EAEW;AACS;;AACpB;EAEK,UACS;EACX,iBAAkB;EAClB;AAAuB;;AAC1B;EAEK,gBACc;EAChB;AAAgB;;AACnB;EAEM,gBACY;EACjB,SAAS;EACT;AAAe,C;AC5FjB;EAAQ,SACM;EACV,2BAA4B;EAC5B;AAAmB;;AACtB;EAEK,kBACiB;EACnB;AAAe;;AAElB;EAEE,YACc;EACb,sBAAuB;EACvB,SAAU;EACV;AAAqB;;AACxB;EAEE,aACgB;EACf;AAAe,C;ACTlB;EAAM,gBACY;EACjB;AAAgB,C","file":"css/2.2.css","sourcesContent":["<header>\r\n<h1>\r\n <img src=\"https://newsline.ccc.govt.nz/assets/Images/Newsline/October-2019/169-VOTE-NOW.jpg\" height=\"100\" alt=\"Logo\">\r\n</h1>\r\n</header>\r\n\r\n\r\n<style>\r\nheader{\r\n    background: white;\r\n    padding: 20px;\r\n}\r\n\r\nh1{\r\n    margin: 0;\r\ntext-align: center;\r\n}\r\n\r\n\r\n\r\n\r\n</style>","<footer>\r\n<div class=\"copyright\">\r\nCopyright &#169; 2021 - Be Your Own Voice\r\n<div>\r\n</footer>\r\n\r\n\r\n<style>\r\nfooter{\r\n    padding: 20px;\r\n    text-align: center;\r\n    background: black;\r\n    color: white;\r\n}\r\n</style>","<div class=\"card\">\r\n <slot></slot>\r\n</div>\r\n\r\n\r\n<style>\r\n\r\n.card{\r\n    background: white;\r\n    padding: 20px;\r\n    border-radius: 6px;\r\n    box-shadow: 0px 2px 4px rgba(0,0,0,0.1);\r\n}\r\n\r\n</style>","<script>\r\n\r\nimport Card from '../shared/Card.svelte';\r\nimport PollStore from '../store/PollStore.js';\r\nimport { Button } from 'sveltail';\r\n\r\nexport let poll;\r\n\r\n\r\n// reactive values\r\n$: totalVotes = poll.votesA + poll.votesB;\r\n$: percentA = Math.floor(100 / totalVotes * poll.votesA);\r\n$: percentB = Math.floor(100 / totalVotes * poll.votesB);\r\n\r\n\r\nconst handleVote = (option, id) =>\r\n{\r\n\r\n        PollStore.update(currentPolls =>\r\n        {\r\n       let copiedPolls = [...currentPolls];\r\n\t   let upvotedPoll = copiedPolls.find((poll) => poll.id == id);\r\n\r\n\t   if (option === 'a')\r\n\t   {\r\n\t\t   upvotedPoll.votesA++;\r\n\t   }\r\n\t   if (option === 'b')\r\n\t   {\r\n\t\t   upvotedPoll.votesB++;\r\n\t   }\r\n\r\n\t  return copiedPolls;\r\n\r\n        });\r\n\t  \r\n};\r\n\r\nconst handleDelete = (id) => \r\n{\r\nPollStore.update(currentPolls =>\r\n{\r\nreturn currentPolls.filter(poll => poll.id != id);\r\n});\r\n};\r\n\r\n</script>\r\n\r\n<Card>\r\n<div class=\"poll\">\r\n <h3>{poll.question}</h3>\r\n <p>Total votes: {totalVotes}</p>\r\n\r\n <div>\r\n     <div class=\"answer\" on:click={() => handleVote('a', poll.id)}>\r\n     <div class=\"percent percent-a\" style=\"width: {percentA}%\"></div>\r\n     <span>{ poll.answerA } ({poll.votesA})</span>\r\n     </div>\r\n      <h3>{poll.answerA}</h3>\r\n  <div>   \r\n\r\n<div>\r\n <div class=\"answer\" on:click={() => handleVote('b', poll.id)}>\r\n     <div class=\"percent percent-b\" style=\"width: {percentB}%\"></div>\r\n     <span>{ poll.answerB } ({poll.votesB}) </span>\r\n     </div>\r\n     <h3>{poll.answerB}</h3>\r\n   </div>  \r\n\r\n     <div class=\"delete\">\r\n     <Button label=\"Delete\" size=\"lg\" class=\"mx-1\" colorBg=\"danger\"  on:click={() => handleDelete(poll.id)}/>\r\n     </div>\r\n </div>\r\n</Card>\r\n\r\n <style>\r\nh3{\r\n    margin: 0 auto;\r\n    color: gray;\r\n}\r\n\r\np{\r\n    margin-top: 6px;\r\n    fonrt-size: 14px;\r\n    color: grey;\r\n    margin-bottom: 30px;\r\n}\r\n\r\n.answer{\r\n    background: whitesmoke;\r\n    cursor: pointer;\r\n    margin: 10px auto;\r\n    position: relative;\r\n    \r\n}\r\n\r\n.answer:hover\r\n{\r\n    opacity: 0.6;\r\n}\r\n\r\nspan{\r\n    display: inline-block;\r\n    padding: 10px 20px;\r\n    \r\n}\r\n\r\n.percent{\r\n    height: 100%;\r\n    position: absolute;\r\n    box-sizing: border-box;\r\n \r\n}\r\n\r\n.percent-a{\r\n  border-left: 4px solid red;\r\n    background: pink;\r\n}\r\n\r\n.percent-b{\r\n    border-left: 4px solid green;\r\n    background: lightgreen;\r\n}\r\n\r\n.delete\r\n{\r\n    margin-top: 30px;\r\n    text-align: center;\r\n}\r\n </style>    \r\n\r\n\r\n ","<script>\r\n\r\n\r\nimport PollDetails from './PollDetails.svelte';\r\n  import PollStore from '../store/PollStore.js';\r\n\r\n</script>\r\n\r\n<div class=\"poll-list\">\r\n{#each $PollStore as poll (poll.id)}\r\n<div>\r\n<PollDetails {poll} />\r\n</div>\r\n{/each}\r\n</div>\r\n\r\n<style>\r\n.poll-list{\r\n    display: grid;\r\n    grid-template-columns: 1fr 1fr; \r\n    grid-gap: 20px;\r\n}\r\n</style>\r\n","<script>\r\nimport { createEventDispatcher } from 'svelte';\r\nimport PollStore from '../store/PollStore.js';\r\nimport { Button } from 'sveltail';\r\n\r\n\r\n  let dispatch = createEventDispatcher();\r\n  let fields = {question: '', answerA: '', answerB: ''};\r\n  let errors= {question: '', answerA: '', answerB: ''};\r\n  let valid= false;\r\n  const submitHandler =()=>\r\n  { \r\n    valid=true;\r\n    \r\n    //validate question\r\n    if(fields.question.trim().length < 5)\r\n    {\r\n      valid = false;\r\n      errors.question = 'Question must be atleast 5 characters long';\r\n\r\n    }\r\n\r\n    else\r\n    {\r\n      errors.question = '';\r\n    }\r\n\r\n    //validate answerA\r\n     if(fields.answerA.trim().length < 1)\r\n    {\r\n      valid = false;\r\n      errors.answerA = 'Answer A cannot be empty';\r\n\r\n    }\r\n\r\n    else\r\n    {\r\n      errors.answerA = '';\r\n    }\r\n\r\n    //validate answerB\r\n     if(fields.answerB.trim().length < 1)\r\n    {\r\n      valid = false;\r\n      errors.answerB = 'Answer B cannot be empty';\r\n    }\r\n\r\n    else\r\n    {\r\n      errors.answerB = '';\r\n    }\r\n\r\n    //add new Poll\r\n    if(valid)\r\n    {\r\n      let poll = {...fields, votesA : 0, votesB : 0, id: Math.random()};\r\n\r\n      PollStore.update(currentPolls => \r\n      {\r\n        return [poll, ...currentPolls];\r\n      });\r\n\r\n      dispatch('add');\r\n    }\r\n  }\r\n</script>\r\n\r\n<form on:submit|preventDefault={submitHandler}>\r\n  <div class=\"form-field\">\r\n  <label for=\"question\">Poll Question: </label>\r\n  <input type=\"text\" id=\"question\" bind:value={fields.question}>\r\n  <div class=\"error\">{ errors.question } </div>\r\n  </div>\r\n\r\n  <div class=\"form-field\">\r\n  <label for=\"answer-a\">Answer A:</label>\r\n  <input type=\"text\" id=\"answer-a\" bind:value={fields.answerA}>\r\n  <div class=\"error\">{ errors.answerA } </div>\r\n  </div>\r\n\r\n  <div class=\"form-field\">\r\n  <label for=\"answer-b\">Answer B: </label>\r\n  <input type=\"text\" id=\"answer-b\" bind:value={fields.answerB}>\r\n  <div class=\"error\">{ errors.answerB } </div>\r\n  </div>\r\n\r\n  <center><Button label=\"Submit\" colorBg=\"secondary\" size=\"lg\" class=\"mx-1\" /></center>\r\n\r\n</form>\r\n\r\n\r\n<style>\r\nform{\r\n    width: 400px;\r\n    margin:0 auto;\r\n    text-align: center;\r\n}\r\n\r\n.form-field{\r\n    margin: 18px auto;\r\n}\r\n\r\ninput{\r\n    width: 100%;\r\n    border-radius: 6px;\r\n    border: 2px solid black;\r\n}\r\n\r\nlabel{\r\n    margin:10px auto;\r\n    text-align: left;\r\n}\r\n\r\n.error{\r\n  font-weight: bold;\r\n  color:red;\r\n  font-size: 12px;\r\n}\r\n</style>","<script>\r\n\r\nimport { createEventDispatcher } from 'svelte';\r\nconst dispatch= createEventDispatcher();\r\nexport let items;\r\nexport let activeItem;\r\n\r\n</script>\r\n\r\n<div class=\"tabs\">\r\n<ul>\r\n{#each items as item}\r\n<li on:click={ () => dispatch('tabChange', item) }>\r\n<div class:active={item === activeItem}>{item}</div>\r\n</li>\r\n{/each}\r\n\r\n</ul>\r\n\r\n</div>\r\n\r\n\r\n<style>\r\n\r\n.active{\r\n    color: red;\r\n    border-bottom: 2px solid red;\r\n    padding-bottom: 8px;\r\n}\r\n\r\n.tabs{\r\n    margin-bottom: 40px;\r\n    cursor: pointer;\r\n\r\n}\r\n\r\nul{\r\n    display: flex;\r\n    justify-content: center;\r\n    padding: 0;\r\n    list-style-type: none;\r\n}\r\n\r\nli{\r\n    margin : 0 16px;\r\n    font-sixe: 18px;\r\n\r\n}\r\n\r\n</style>","<script>\r\n   import Header from './Header.svelte';\r\n   import Footer from './Footer.svelte';\r\n    import PollList from './PollList.svelte';\r\n   import CreatePollForm from './CreatePollForm.svelte';\r\n \r\n    import Tabs from '../shared/Tabs.svelte';\r\n\r\n   //tabs\r\n   let items =['Current Polls', 'Add New Poll'];\r\n   let activeItem ='Current Polls';\r\n\r\n   const tabChange = (e) => {\r\n\t   activeItem = e.detail;\r\n   }\r\n  \r\n\r\n   const handleAdd = (e) =>\r\n   {\r\n\t   activeItem = 'Current Polls';\r\n\t   \r\n   };\r\n\r\n</script>\r\n\r\n<Header />\r\n<main>\r\n\t<Tabs {activeItem} {items}  on:tabChange={tabChange}   />\r\n\t{#if activeItem === 'Current Polls'}\r\n\t<PollList  /> \r\n\t{:else if activeItem === 'Add New Poll'}\r\n\t<CreatePollForm on:add={handleAdd} />\r\n\t{/if}\r\n</main>\r\n<Footer />\r\n<style>\r\n\tmain {\r\n\t\tmax-width: 960 px;\r\n\t\tmargin:40px auto;\r\n\t}\r\n\r\n\r\n\r\n</style>"],"sourceRoot":""}